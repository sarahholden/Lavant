<script type="text/javascript">

(function() {

  var pathname = window.location.hostname;
  var collectionHandle = '{{ collection.handle }}';
  var urlHandle = '{{ urlFilter }}'; // CREATED ON COLLECTION PAGE
  var productListRef = '.js-product-list';
  var requestUrl = '';
  var baseUrl = '//' + pathname ;
  var sortOrder = '';
  var tagString = '';
  var collectionString = '';
  var defaultCollectionString = '/collections/' + collectionHandle;


  /* ---------------------------------------------
  HELPER FUNCTIONS
  ------------------------------------------------ */
  function clearStr(str) {

    var full = '';

    str.replace(/([^"]+)|("[^"]+")/g, function($0, $1, $2) {
      if ($1) {
        full += $1;
      } else if ($2) {
        full += $2.replace(/\s/g, '_');
      } else if ($0) {
        full +=  $0.replace(/\s/g, '_');
      }
    });

    return full;
  }


  function updateFilterTags () {
    var tags = tagString.replace('/','');
    tags = tags.split('+');

    var matches = [];

    // HIDE ALL FILTERS
    $('.js-category-filter li').hide();

    // LOOP THROUGH TAG COMBINATION LISTS
    for (var i = 0; i < productCombinations.length; i++) {
      var currentFilterCombo = productCombinations[i];
      // debugger;

      // var match = currentFilterCombo.every(i => tags.includes(i));

      var allTagsExistInCombo = true;

      for (var j = 0; j < tags.length; j++) {
        var currentTag = tags[j];
        if (!currentFilterCombo.includes(currentTag)) {
          allTagsExistInCombo = false;
        }
      }

      if (allTagsExistInCombo) {
        matches.push(currentFilterCombo);

      }
      // IF THE COMBINATION LIST CONTAINS THE SELECTED TAG, SHOW THAT FILTER
    }

    matches = matches.flat();
    console.log(matches);

    for (var k = 0; k < matches.length; k++) {
      $('.js-category-filter [data-tag="' + matches[k] + '"]').closest('li').show();
    }

  }

  // UPDATE ENDLESS SCROLL
  // function updatePagination (requestUrl) {
  //   ShCustom.currentPage = 1;
  //   ShCustom.paginationBaseUrl = requestUrl;
  //
  //
  //   // GET TOTAL NUMBER OF POSTS WITH REQUEST URL
  //   requestUrl = requestUrl.split('?')[0];
  //
  //   ShCustom.sortUrl = requestUrl.split('?')[1] ? requestUrl.split('?')[1] : '';
  //
  //   $.get(requestUrl + '?view=paginate-count', function(data) {
  //     var html = $.parseHTML(data);
  //
  //     for (var i = 0; i < html.length; i += 1) {
  //
  //       var node = html[i];
  //
  //       if (node.nodeType === 1) {
  //         if (node.id === 'PaginationCountJSON') {
  //           var filterData = jQuery.parseJSON(clearStr(node.textContent));
  //           ShCustom.totalPosts = filterData;
  //           break;
  //         }
  //       }
  //     }
  //
  //     // console.log(ShCustom.totalPosts);
  //     // console.log(ShCustom.paginationBaseUrl);
  //     // console.log(ShCustom.currentPage);
  //   })
  //   .fail(function() {
  //     console.log('error');
  //   });
  // }



  function ajaxUpdateResults (requestUrl) {
    // ADD LOADING STYLES
    addLoadingStyles();

    $.get({
      url: requestUrl,
      success: function (data) {
        $('.js-loading-icon-row').hide();

        var filteredResults = $(data).find(productListRef).html();
        $(productListRef).html(filteredResults);
        $(productListRef).fadeIn(400);

        if (tagString != '') {
          updateFilterTags();
        }

        // updateFilterTags(requestUrl);
        // updatePagination(requestUrl);

      },
      error: function () {

        var message = "<div class='no-product-results'><h2 >No products match your filter criteria.</h2><p>Clear all and try again.</p></div>";
        $(productListRef).html(message);
        $('.js-loading-icon-row').hide();
        $(productListRef).fadeIn(400);

      }
    });
  }

  function hideDropdowns () {
    $('.js-filter-dropdown').attr('data-visible', 'false');
  }

  function addLoadingStyles () {
    $(productListRef).hide();
    $('.js-loading-icon-products').addClass('loading').fadeIn();
    $('.js-loading-icon-row').fadeIn();
  }


  /* ---------------------------------------------
  EVENTS
  ------------------------------------------------ */

  /*=========================
  SORT
  ===========================*/
  $('.js-sort-list').on('click', function () {
    var $selectedSortOption = $(this);
    var sortCategory = $selectedSortOption.data('sort-category');

    // SET THE DEFAULT COLLECTION TO THE CURRENT COLLECTION PAGE, IF NOT ALREADY SELECTED
    collectionString = collectionString == '' ? defaultCollectionString : collectionString;

    // Reset sort order
    var requestUrl = baseUrl + collectionString + tagString;

    $selectedSortOption.attr('data-active', 'true');
    $('.js-current-sort').text($selectedSortOption.text());
    sortOrder = '?sort_by=' + sortCategory;
    requestUrl += sortOrder;

    ajaxUpdateResults(requestUrl);

  });

  /*=========================
  TOGGLE FILTER DROPDOWN
  ===========================*/

  // $('.js-filter-outer-wrapper').on('mouseenter', function () {
  //   $(this).closest('.js-filter-outer-wrapper').attr('data-visible', 'true');
  //   $(this).closest('.js-filter-dropdown').focus();
  //
  // });
  //
  // $('.js-filter-outer-wrapper').on('mouseleave', function () {
  //   $(this).closest('.js-filter-outer-wrapper').attr('data-visible', 'false');
  // });

  $('.js-expand-filter-dropdown').on('click', function () {
    var $outerFilterWrapper = $(this).closest('.js-filter-outer-wrapper');
    var isVisible = $outerFilterWrapper.attr('data-visible');

    if (isVisible == "false") {
      $outerFilterWrapper.attr('data-visible', 'true');
      $(this).closest('.js-filter-dropdown').focus();
    } else {
      $outerFilterWrapper.attr('data-visible', 'false');
    }

    $('body').on('click.closeDropdown', function (e) {
      if ($(e.target).closest('.js-expand-filter-dropdown').length == 0 ) {
        $outerFilterWrapper.attr('data-visible', 'false');
        $('body').off('click.closeDropdown');
      }
    });

  });


  /*=========================
  FILTER LINK CLICK
  ===========================*/
  $('.js-category-filter').on('click', 'a', function (e) {
    e.preventDefault();
    collectionString = '';

    $(this).closest('li').addClass('active-filter');

    $(this).closest('.js-filter-outer-wrapper').attr('data-visible', 'false');

    selectedTag = $(this).data('tag');
    var filterText = $(this).text();

    // If a tag has already been selected, add this one on
    if (selectedTag != '' && tagString != '') {
      tagString += '+' + selectedTag;
    } else if (selectedTag != '') {
      tagString += '/' + selectedTag;
    }

    var currentFilterTemplate = `<span class="js-filter-item"><span class="current-filter">${filterText}</span><button class="text-only clear" data-tag="${selectedTag}" aria-label="Clear All Filters"></button></span>`;
    $('.js-active-filters').append(currentFilterTemplate);

    // HIDE DOWN / UP CARET
    $('.js-trigger-icon').hide();

    $('.js-filter-trigger-text').text('Filter Selected:');

    collectionString = collectionString != '' ? collectionString : defaultCollectionString;

    // End goal example: ......collections/all/white+small
    var requestUrl = baseUrl + collectionString + tagString + sortOrder;

    ajaxUpdateResults(requestUrl);

  });

  /*=========================
  CLEAR ALL FILTERS
  ===========================*/
  $('.js-active-filters').on('click', '.clear', function () {
    if ($('.js-active-filters .js-filter-item').length == 1) {
      clearAll();
    } else {
      // find tag to remove
      debugger;
      var tagToRemove = $(this).attr('data-tag');
      collectionString = collectionString == '' ? defaultCollectionString : collectionString;

      // remove tag from tag string
      tagString = tagString.replace(`+${tagToRemove}`, '');
      tagString = tagString.replace(`${tagToRemove}`, '');


      var requestUrl = baseUrl + collectionString + tagString + sortOrder;
      console.log(requestUrl);

      // UPDATE PRODUCT LIST
      ajaxUpdateResults(requestUrl);

      // SHOW THAT FILTER ITEM AGAIN IN DROPDOWN
      $('.js-category-filter').find(`[data-tag="${tagToRemove}"]`).removeClass('active-filter');

      // Hide that active filter + clear button
      $(this).closest('.js-filter-item').remove();

    }




  });

  /*=========================
  CLEAR ALL FILTERS
  ===========================*/
  function clearAll () {
    collectionString = defaultCollectionString;
    tagString = '';

    // Remove tags from URL
    var requestUrl = baseUrl + collectionString;

    // UPDATE PRODUCT LIST
    ajaxUpdateResults(requestUrl);


    // SHOW ANY FILTERS THAT WERE UNAVAILABLE AS COMBOS
    $('.js-category-filter li').show();
    $('.active-filter').removeClass('active-filter');

    // SHOW DOWN / UP CARET
    $('.js-trigger-icon').fadeIn(300);

    // HIDE BUTTON AFTER CLICKED
    $('.js-clear-all-filters').hide();
    $('.js-active-filters').html('');
    $('.js-filter-trigger-text').text('Apply Filter');
    $('.js-loading-icon-row').hide();
  }







})();


</script>
